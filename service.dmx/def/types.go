// Code generated by jrpc. DO NOT EDIT.

package dmxdef

import (
	def "github.com/shadracnicholas/home-automation/libraries/go/device/def"
	oops "github.com/shadracnicholas/home-automation/libraries/go/oops"
)

// GetDeviceRequest is defined in the .def file
type GetDeviceRequest struct {
	DeviceId string `json:"device_id"`
}

// GetDeviceResponse is defined in the .def file
type GetDeviceResponse struct {
	Device *def.Device `json:"device"`
}

// UpdateDeviceRequest is defined in the .def file
type UpdateDeviceRequest struct {
	DeviceId string                 `json:"device_id"`
	State    map[string]interface{} `json:"state"`
}

// UpdateDeviceResponse is defined in the .def file
type UpdateDeviceResponse struct {
	Device *def.Device `json:"device"`
}

// Validate returns an error if any of the fields have bad values
func (m *GetDeviceRequest) Validate() error {
	if m.DeviceId == "" {
		return oops.BadRequest("field 'device_id' is required")
	}
	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *GetDeviceResponse) Validate() error {
	if err := m.Device.Validate(); err != nil {
		return err
	}

	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *UpdateDeviceRequest) Validate() error {
	if m.DeviceId == "" {
		return oops.BadRequest("field 'device_id' is required")
	}
	return nil
}

// Validate returns an error if any of the fields have bad values
func (m *UpdateDeviceResponse) Validate() error {
	if err := m.Device.Validate(); err != nil {
		return err
	}

	return nil
}
