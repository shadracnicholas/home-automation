// Code generated by jrpc. DO NOT EDIT.

package handler

import (
	context "context"

	router "github.com/shadracnicholas/home-automation/libraries/go/router"
	taxi "github.com/shadracnicholas/home-automation/libraries/go/taxi"
	def "github.com/shadracnicholas/home-automation/service.scene/def"
)

type service interface {
	CreateScene(ctx context.Context, body *def.CreateSceneRequest) (*def.CreateSceneResponse, error)
	ReadScene(ctx context.Context, body *def.ReadSceneRequest) (*def.ReadSceneResponse, error)
	ListScenes(ctx context.Context, body *def.ListScenesRequest) (*def.ListScenesResponse, error)
	DeleteScene(ctx context.Context, body *def.DeleteSceneRequest) (*def.DeleteSceneResponse, error)
	SetScene(ctx context.Context, body *def.SetSceneRequest) (*def.SetSceneResponse, error)
}

// NewRouter creates a new router for this service
func NewRouter(s service) *router.Router {
	r := router.New()

	r.RegisterHandler("POST", "/scenes", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.CreateSceneRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return s.CreateScene(ctx, body)
	})

	r.RegisterHandler("GET", "/scene", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.ReadSceneRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return s.ReadScene(ctx, body)
	})

	r.RegisterHandler("GET", "/scenes", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.ListScenesRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return s.ListScenes(ctx, body)
	})

	r.RegisterHandler("DELETE", "/scene", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.DeleteSceneRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return s.DeleteScene(ctx, body)
	})

	r.RegisterHandler("POST", "/scene/set", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.SetSceneRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return s.SetScene(ctx, body)
	})

	return r
}
