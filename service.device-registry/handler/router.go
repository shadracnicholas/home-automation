// Code generated by jrpc. DO NOT EDIT.

package handler

import (
	context "context"

	router "github.com/shadracnicholas/home-automation/libraries/go/router"
	taxi "github.com/shadracnicholas/home-automation/libraries/go/taxi"
	def "github.com/shadracnicholas/home-automation/service.device-registry/def"
)

type service interface {
	GetDevice(ctx context.Context, body *def.GetDeviceRequest) (*def.GetDeviceResponse, error)
	ListDevices(ctx context.Context, body *def.ListDevicesRequest) (*def.ListDevicesResponse, error)
	GetRoom(ctx context.Context, body *def.GetRoomRequest) (*def.GetRoomResponse, error)
	ListRooms(ctx context.Context, body *def.ListRoomsRequest) (*def.ListRoomsResponse, error)
}

// NewRouter creates a new router for this service
func NewRouter(s service) *router.Router {
	r := router.New()

	r.RegisterHandler("GET", "/device", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.GetDeviceRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return s.GetDevice(ctx, body)
	})

	r.RegisterHandler("GET", "/devices", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.ListDevicesRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return s.ListDevices(ctx, body)
	})

	r.RegisterHandler("GET", "/room", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.GetRoomRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return s.GetRoom(ctx, body)
	})

	r.RegisterHandler("GET", "/rooms", func(ctx context.Context, decode taxi.Decoder) (interface{}, error) {
		body := &def.ListRoomsRequest{}
		if err := decode(body); err != nil {
			return nil, err
		}

		if err := body.Validate(); err != nil {
			return nil, err
		}

		return s.ListRooms(ctx, body)
	})

	return r
}
